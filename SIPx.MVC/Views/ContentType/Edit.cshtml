@using Syncfusion.EJ2
@using Newtonsoft.Json
@model ContentTypeUpdateGet
@{
    var Term = (List<UITermLanguageCustomizationList>)ViewBag.UITerms;
    var ErrorMessages = (List<ErrorMessage>)ViewBag.ErrorMessages;
    ViewData["Title"] = @Term.Find(x => x.InternalName.Equals("Content type")).TermString;
    ViewData["Image"] = "Type.png";
    ViewData["FavoriteGroup"] = @ViewBag.FavoriteGroupList;
    Layout = "_LayoutAdmin";
}
<div class="container">
    <form method="post">
        @if (ViewBag.Env == "Production")
        {
            <div hidden class="row">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Id")).TermString ClassificationId
                </div>
                <div class="col-9">
                    <ejs-numerictextbox id="ContentTypeId" ejs-for="@Model.ContentTypeId" cssClass="e-outline" placeholder="ContentTypeId" floatLabelType="Auto"></ejs-numerictextbox>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Id")).TermString ClassificationId
                </div>
                <div class="col-9">
                    <ejs-numerictextbox id="ContentTypeId" ejs-for="@Model.ContentTypeId" cssClass="e-outline" placeholder="ContentTypeId" floatLabelType="Auto"></ejs-numerictextbox>
                </div>
            </div>
        }

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Name")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="Name" ejs-for="Name" cssClass="e-outline" placeholder="Name" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        @if (ErrorMessages.Exists(x => x.ErrorMessageId == 5))
        {
            <div class="row">
                <div class="offset-3 col-9 alert-danger">
                    @ErrorMessages.Find(x => x.ErrorMessageId == 5).Name
                </div>
            </div>
        }
        @if (ErrorMessages.Exists(x => x.ErrorMessageId == 104))
        {
            <div class="row">
                <div class="offset-3 col-9 alert-danger">
                    @ErrorMessages.Find(x => x.ErrorMessageId == 104).Name
                </div>
            </div>
        }
        <div class="row">
            <div class="col-3">@Term.Find(x => x.InternalName.Equals("Description")).TermString</div>
            <div class="col-9">
                <ejs-richtexteditor ejs-for="Description" id="defaultRTE" showCharCount="true" actionBegin="handleFullScreen" actionComplete="actionCompleteHandler" maxLength="2000" created="created">
                    <e-content-template>
                    </e-content-template>
                    <e-richtexteditor-toolbarsettings items="@ViewBag.tools">
                    </e-richtexteditor-toolbarsettings>
                </ejs-richtexteditor>
            </div>
        </div>
        @if (ErrorMessages.Exists(x => x.ErrorMessageId == 9))
        {
            <div class="row">
                <div class="offset-3 col-9 alert-danger">
                    @ErrorMessages.Find(x => x.ErrorMessageId == 9).Name
                </div>
            </div>
        }
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Menu name")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="MenuName" ejs-for="MenuName" cssClass="e-outline" placeholder="Menu name" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        @if (ErrorMessages.Exists(x => x.ErrorMessageId == 10))
        {
            <div class="row">
                <div class="offset-3 col-9 alert-danger">
                    @ErrorMessages.Find(x => x.ErrorMessageId == 10).Name
                </div>
            </div>
        }
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Mouse over")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="MouseOver" ejs-for="MouseOver" cssClass="e-outline" placeholder="Mouse over" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        @if (ErrorMessages.Exists(x => x.ErrorMessageId == 11))
        {
            <div class="row">
                <div class="offset-3 col-9 alert-danger">
                    @ErrorMessages.Find(x => x.ErrorMessageId == 11).Name
                </div>
            </div>
        }
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Content type group")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="ContentTypeGroupId" dataSource="@Model.ContentTypeGroups" ejs-for="@Model.ContentTypeGroupId" value="@Model.ContentTypeGroupId" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="ContentTypeGroupId"></e-dropdownlist-fields>
                </ejs-dropdownlist>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Process template")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="ProcessTemplateId" dataSource="@Model.ProcessTemplates" ejs-for="@Model.ProcessTemplateId" value="@Model.ProcessTemplateId" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="ProcessTemplateId"></e-dropdownlist-fields>
                </ejs-dropdownlist>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Security level")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="SecurityLevelId" dataSource="@Model.SecurityLevels" ejs-for="@Model.SecurityLevelId" value="@Model.SecurityLevelId" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="SecurityLevelId"></e-dropdownlist-fields>
                </ejs-dropdownlist>
            </div>
        </div>
        @for (int i = 0; i < Model.ContentTypeClassifications.Count; i++)
        {
            <div class="row">
                <div class="col-3">
                    @Model.ContentTypeClassifications[i].Name
                    <ejs-numerictextbox id="@Model.ContentTypeClassifications[i].ControlA" ejs-for="@Model.ContentTypeClassifications[i].ClassificationId" cssClass="e-outline" placeholder="ID" floatLabelType="Auto" enabled="false"></ejs-numerictextbox>
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="@Model.ContentTypeClassifications[i].ControlB" dataSource="@Model.ContentTypeClassificationStatuses" ejs-for="@Model.ContentTypeClassifications[i].ObjectTypeClassificationStatusId" value="@Model.ContentTypeClassifications[i].ObjectTypeClassificationStatusId" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="ObjectTypeClassificationStatusId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>
                </div>
            </div>

        }

        <div class="row">
            <div class="offset-3 col-9">
                <table>
                    <tr>
                        <th colspan="2" style="width:50%;"></th>
                        <th style="width:25%;">@Term.Find(x => x.InternalName.Equals("Ownership")).TermString</th>
                        <th style="width:25%;">@Term.Find(x => x.InternalName.Equals("Edit")).TermString</th>
                        <th style="width:25%;">@Term.Find(x => x.InternalName.Equals("Read")).TermString</th>
                    </tr>
                    <tr>
                        <td colspan="2">@Term.Find(x => x.InternalName.Equals("Any")).TermString</td>
                        <td><ejs-checkbox id="IsFreeOwnership" ejs-for="@Model.IsFreeOwnership"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsFreeEdit" ejs-for="@Model.IsFreeEdit"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsFreeRead" ejs-for="@Model.IsFreeRead"></ejs-checkbox></td>
                        <td></td>
                    </tr>
                    <tr>
                        <td style="width:5%;"></td>
                        <td style="width:20%;">@Term.Find(x => x.InternalName.Equals("Selectable")).TermString</td>
                        <td></td>
                        <td><ejs-checkbox id="IsFreeEditSelectable" ejs-for="@Model.IsFreeEditSelectable"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsFreeReadSelectable" ejs-for="@Model.IsFreeReadSelectable"></ejs-checkbox></td>
                    </tr>
                    <tr>
                        <td colspan="2">@Term.Find(x => x.InternalName.Equals("Organization based")).TermString</td>
                        <td><ejs-checkbox id="IsOrganizationBasedOwnership" ejs-for="@Model.IsOrganizationBasedOwnership"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsOrganizationBasedEdit" ejs-for="@Model.IsOrganizationBasedEdit"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsOrganizationBasedRead" ejs-for="@Model.IsOrganizationBasedRead"></ejs-checkbox></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>@Term.Find(x => x.InternalName.Equals("Selectable")).TermString</td>
                        <td></td>
                        <td><ejs-checkbox id="IsOrganizationBasedEditSelectable" ejs-for="@Model.IsOrganizationBasedEditSelectable"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsOrganizationBasedReadSelectable" ejs-for="@Model.IsOrganizationBasedReadSelectable"></ejs-checkbox></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>@Term.Find(x => x.InternalName.Equals("Incl. subs")).TermString</td>
                        <td></td>
                        <td><ejs-checkbox id="IsOrganizationBasedEditSub" ejs-for="@Model.IsOrganizationBasedEditSub"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsOrganizationBasedReadSub" ejs-for="@Model.IsOrganizationBasedReadSub"></ejs-checkbox></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>@Term.Find(x => x.InternalName.Equals("Incl. parents")).TermString</td>
                        <td></td>
                        <td><ejs-checkbox id="IsOrganizationBasedEditParent" ejs-for="@Model.IsOrganizationBasedEditParent"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsOrganizationBasedReadParent" ejs-for="@Model.IsOrganizationBasedReadParent"></ejs-checkbox></td>
                    </tr>
                    <tr>
                        <td colspan="2">@Term.Find(x => x.InternalName.Equals("Project based")).TermString</td>
                        <td><ejs-checkbox id="IsProjectBasedOwnership" ejs-for="@Model.IsProjectBasedOwnership"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsProjectBasedEdit" ejs-for="@Model.IsProjectBasedEdit"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsProjectBasedRead" ejs-for="@Model.IsProjectBasedRead"></ejs-checkbox></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>@Term.Find(x => x.InternalName.Equals("Selectable")).TermString</td>
                        <td></td>
                        <td><ejs-checkbox id="IsProjectBasedEditSelectable" ejs-for="@Model.IsProjectBasedEditSelectable"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsProjectBasedReadSelectable" ejs-for="@Model.IsProjectBasedReadSelectable"></ejs-checkbox></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>@Term.Find(x => x.InternalName.Equals("Incl. subs")).TermString</td>
                        <td></td>
                        <td><ejs-checkbox id="IsProjectBasedEditSub" ejs-for="@Model.IsProjectBasedEditSub"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsProjectBasedReadSub" ejs-for="@Model.IsProjectBasedReadSub"></ejs-checkbox></td>
                    </tr>
                    <tr>
                        <td></td>
                        <td>@Term.Find(x => x.InternalName.Equals("Incl. parents")).TermString</td>
                        <td></td>
                        <td><ejs-checkbox id="IsProjectBasedEditParent" ejs-for="@Model.IsProjectBasedEditParent"></ejs-checkbox></td>
                        <td><ejs-checkbox id="IsProjectBasedReadParent" ejs-for="@Model.IsProjectBasedReadParent"></ejs-checkbox></td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Icon")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="IconId" dataSource="@Model.Icons" ejs-for="@Model.IconId" value="@Model.IconId" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="IconId"></e-dropdownlist-fields>
                </ejs-dropdownlist>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Color")).TermString
            </div>
            <div class="col-9">
                <ejs-colorpicker id='color-picker' ejs-for="Color" value="Color"></ejs-colorpicker>
            </div>
        </div>
        <div class="row">
            <div class="col-3 offset-3">
                <ejs-button id="primarybtn" content="@Term.Find(x => x.InternalName.Equals("Save")).TermString" action="Submit" isPrimary="true"></ejs-button>
                <a asp-action="Index">@Term.Find(x => x.InternalName.Equals("Cancel")).TermString</a>
            </div>
        </div>


    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
<style>
    .e-code-mirror::before {
        content: '\e345';
    }

    .e-html-preview::before {
        content: '\e350';
    }

    .CodeMirror-linenumber,
    .CodeMirror-gutters {
        display: none;
    }

    .sb-header {
        z-index: 100;
    }

    .sb-content.e-view.hide-header {
        top: 0 !important;
    }

    .sb-header.e-view.hide-header {
        display: none;
    }

    .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #F4F5F7;
    }

    .highcontrast .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #303030;
    }
</style>
<script type="text/javascript">
    var rteObj, myCodeMirror, textArea;
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();
    }
    function mirrorConversion(e) {
        var id = rteObj.getID() + 'mirror-view';
        var mirrorView = rteObj.element.querySelector('#' + id);
        var charCount = rteObj.element.querySelector('.e-rte-character-count');
        if (e.targetItem === 'Preview') {
            textArea.style.display = 'block';
            mirrorView.style.display = 'none';
            textArea.innerHTML = myCodeMirror.getValue();
            charCount.style.display = 'block';
        }
        else {
            if (!mirrorView) {
                mirrorView = ej.base.createElement('div', { className: 'e-content' });
                mirrorView.id = id;
                textArea.parentNode.appendChild(mirrorView);
            }
            else {
                mirrorView.innerHTML = '';
            }
            textArea.style.display = 'none';
            mirrorView.style.display = 'block';
            renderCodeMirror(mirrorView, defaultRTE.value);
            charCount.style.display = 'none';
        }
    }
    function renderCodeMirror(mirrorView, content) {
        myCodeMirror = CodeMirror(mirrorView, {
            value: content,
            lineNumbers: true,
            mode: 'text/html',
            lineWrapping: true,
        });
    }
    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
    function actionCompleteHandler(e) {
        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
            this.sourceCodeModule.getPanel().style.display = 'none';
            mirrorConversion(e);
        }
        else {
            setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);
        }
    }
</script>
<script type="text/javascript">
    function ContentTypeGroupId(e) {
                var query = new ej.data.Query();
                query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.ContentTypeGroups)), query);
            }
</script>
<script type="text/javascript">
    function ProcessTemplateId(e) {
                var query = new ej.data.Query();
                query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.ProcessTemplates)), query);
            }
</script>
<script type="text/javascript">
    function SecurityLevelId(e) {
                var query = new ej.data.Query();
                query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.SecurityLevels)), query);
            }
</script>
