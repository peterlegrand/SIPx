@using Syncfusion.EJ2
@using Newtonsoft.Json
@model PageSectionContentConditionCreateGet
@{
    var Term = (List<UITermLanguageCustomizationList>)ViewBag.UITerms;
    var ErrorMessages = (List<ErrorMessage>)ViewBag.ErrorMessages;
    ViewData["Title"] = @Term.Find(x => x.InternalName.Equals("Add page section condition")).TermString;

    Layout = "_LayoutAdmin";
}
<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js">
</script>
<script>
    $(document).ready(function () {
        $(".values").hide();
        $("#ContainsCondition").hide();
        $("#ContentStatusCondition").hide();
        $("#UserCondition").hide();
        $("#ModifierCondition").hide();
        $("#CreatorCondition").hide();
        $("#OrganizationCondition").hide();
        $("#ProjectCondition").hide();
        $("#CreatedFromDateCondition").hide();
        $("#CreatedToDateCondition").hide();
        $("#CreatedFromDateCondition").hide();
        $("#ModifiedToDateCondition").hide();
        $("#ModifiedFromDateCondition").hide();
        $("#SecurityLevelCondition").hide();
        $("#ControlT3").hide();
        $("#LanguageCondition").hide();
        $("#ContentTypeCondition").hide();
        $("#ClassificationValueCondition").hide();
        $('#PageSectionContentConditionTypeIdExtended_hidden').on('change', function () {
            $(".values").hide();
            $("#ContainsCondition").hide();
            $("#ContentStatusCondition").hide();
            $("#UserCondition").hide();
            $("#ModifierCondition").hide();
            $("#CreatorCondition").hide();
            $("#OrganizationCondition").hide();
            $("#ProjectCondition").hide();
            $("#CreatedFromDateCondition").hide();
            $("#CreatedToDateCondition").hide();
            $("#CreatedFromDateCondition").hide();
            $("#ModifiedToDateCondition").hide();
            $("#ModifiedFromDateCondition").hide();
            $("#SecurityLevelCondition").hide();
            $("#LanguageCondition").hide();
            $("#ContentTypeCondition").hide();
            $("#ClassificationValueCondition").hide();
            var str1 = "#";
            var res = str1.concat(this.value.substring(0, 2));
            if (this.value.substring(0, 1) == 'V') {
                $(res).show();
            }
            if (this.value == 'T1' ) {
                $("#UserCondition").show();
            }
            if (this.value == 'T2') {
                $("#ContainsCondition").show();
            }
            if (this.value == 'T3') {
                $("#OrganizationCondition").show();
            }
            if (this.value == 'T4') {
                $("#ProjectCondition").show();
            }
            if (this.value == 'T5') {
                $("#ContentTypeCondition").show();
            }
            if (this.value == 'T6') {
                $("#ContentStatusCondition").show();
            }
            if (this.value == 'T7') {
                $("#LanguageCondition").show();
            }
            if (this.value == 'T8') {
                $("#SecurityLevelCondition").show();
            }
            if (this.value == 'T9') {
                $("#CreatorCondition").show();
            }
            if (this.value == 'T10') {
                $("#ModifierCondition").show();
            }
            if (this.value == 'T12') {
                $("#CreatedFromDateCondition").show();
            }
            if (this.value == 'T13') {
                $("#CreatedToDateCondition").show();
            }
            if (this.value == 'T14') {
                $("#ModifiedFromDateCondition").show();
            }
            if (this.value == 'T15') {
                $("#ModifiedToDateCondition").show();
            }
        });
        
    });
</script>
<h1>
    <img src="~/images/icons/Condition.png" width="50" height="50" />@Term.Find(x => x.InternalName.Equals("Add page section condition")).TermString
</h1>
<div class="container">


    <form method="post">
        <div class="row">
            <div class="col-3">
            </div>    <div class="col-9">
                <ejs-numerictextbox id="PageSectionId" ejs-for="PageSectionId" cssClass="e-outline" placeholder="PageSectionId" floatLabelType="Auto"></ejs-numerictextbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Name")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="Name" ejs-for="Name" cssClass="e-outline" placeholder="Name" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">@Term.Find(x => x.InternalName.Equals("Description")).TermString</div>
            <div class="col-9">
                <ejs-richtexteditor ejs-for="Description" id="defaultRTE" showCharCount="true" actionBegin="handleFullScreen" actionComplete="actionCompleteHandler" maxLength="2000" created="created">
                    <e-content-template>
                    </e-content-template>
                    <e-richtexteditor-toolbarsettings items="@ViewBag.tools">
                    </e-richtexteditor-toolbarsettings>
                </ejs-richtexteditor>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Menu name")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="MenuName" ejs-for="MenuName" cssClass="e-outline" placeholder="Menu name" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Mouse over")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="MouseOver" ejs-for="MouseOver" cssClass="e-outline" placeholder="Mouse over" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Condition type")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="PageSectionContentConditionTypeIdExtended" dataSource="@Model.PageSectionContentConditionTypes" ejs-for="@Model.PageSectionContentConditionTypeIdExtended" value="@Model.PageSectionContentConditionTypeIdExtended" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="ExtendedId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>

        <div class="row" id="UserCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("User")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="UserId" dataSource="@Model.Users" ejs-for="@Model.SelectedUserId" value="@Model.SelectedUserId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="UserId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row" id="ModifierCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Modifier")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="ModifierId" dataSource="@Model.Users" ejs-for="@Model.SelectedModifierId" value="@Model.SelectedModifierId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="UserId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row" id="CreatorCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Creator")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="CreatorId" dataSource="@Model.Users" ejs-for="@Model.SelectedCreatorId" value="@Model.SelectedCreatorId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="UserId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row" id="OrganizationCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Organization")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="OrganizationId" dataSource="@Model.Organizations" ejs-for="@Model.OrganizationId" value="@Model.OrganizationId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="OrganizationId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row" id="ProjectCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Project")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="ProjectId" dataSource="@Model.Projects" ejs-for="@Model.ProjectId" value="@Model.ProjectId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="ProjectId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div id="ClassificationValueCondition">
            @for (int i = 0; i < Model.Classifications.Count; i++)
            {
                <div class="row values" id="@Model.Classifications[i].ControlA" >
                    <div class="col-3">

                    </div>
                    <div class="col-9">
                        <ejs-dropdownlist id="@Model.Classifications[i].ControlB" dataSource="@Model.Classifications[i].ClassificationValues" ejs-for="@Model.Classifications[i].ClassificationValueId" value="@Model.Classifications[i].ClassificationValueId" index="2" popupHeight="220px">
                            <e-dropdownlist-fields text="Name" value="ClassificationValueId"></e-dropdownlist-fields>
                        </ejs-dropdownlist>

                    </div>
                </div>
            }
        </div>
        <div class="row" id="CreatedFromDateCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Created from date")).TermString
            </div>
            <div class="col-9">
                <ejs-datepicker id="CreatedDateFrom" ejs-for="@Model.CreatedFromDate" value="@Model.CreatedFromDate"></ejs-datepicker>
            </div>
        </div>
        <div class="row" id="CreatedToDateCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Created to date")).TermString
            </div>
            <div class="col-9">
                <ejs-datepicker id="CreatedDateTo" ejs-for="@Model.CreatedToDate" value="@Model.CreatedToDate"></ejs-datepicker>
            </div>
        </div>
        <div class="row" id="ModifiedFromDateCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Modified from date")).TermString
            </div>
            <div class="col-9">
                <ejs-datepicker id="ModifiedDateFrom" ejs-for="@Model.ModifiedFromDate" value="@Model.ModifiedFromDate"></ejs-datepicker>
            </div>
        </div>
        <div class="row" id="ModifiedToDateCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Modified to date")).TermString
            </div>
            <div class="col-9">
                <ejs-datepicker id="ModifiedDateTo" ejs-for="@Model.ModifiedToDate" value="@Model.ModifiedToDate"></ejs-datepicker>
            </div>
        </div>
        <div class="row" id="SecurityLevelCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Security level")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="SecurityLevelId" dataSource="@Model.SecurityLevels" ejs-for="@Model.SecurityLevelId" value="@Model.SecurityLevelId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="SecurityLevelId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row" id="ContainsCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Contains")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="Contains" ejs-for="@Model.PageSectionContentConditionString" value="@Model.PageSectionContentConditionString" index="2" popupHeight="220px">
                </ejs-textbox>
            </div>
        </div>
        <div class="row" id="LanguageCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Language")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="LanguageId" dataSource="@Model.Languages" ejs-for="@Model.LanguageId" value="@Model.LanguageId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="LanguageId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row" id="ContentTypeCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Content type")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="ContentTypeId" dataSource="@Model.ContentTypes" ejs-for="@Model.ContentTypeId" value="@Model.ContentTypeId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="ContentTypeId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row" id="ContentStatusCondition">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Content status")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="ContentStatusId" dataSource="@Model.ContentStatuses" ejs-for="@Model.ContentStatusId" value="@Model.ContentStatusId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="ContentStatusId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row">
            <div class="col-3 offset-3">
                <ejs-button id="primarybtn" content="@Term.Find(x => x.InternalName.Equals("Save")).TermString" isPrimary="true"></ejs-button>
                <a asp-action="Index" asp-route-id="@Model.PageSectionId">@Term.Find(x => x.InternalName.Equals("Cancel")).TermString</a>
            </div>
        </div>

    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
<style>
    .e-code-mirror::before {
        content: '\e345';
    }

    .e-html-preview::before {
        content: '\e350';
    }

    .CodeMirror-linenumber,
    .CodeMirror-gutters {
        display: none;
    }

    .sb-header {
        z-index: 100;
    }

    .sb-content.e-view.hide-header {
        top: 0 !important;
    }

    .sb-header.e-view.hide-header {
        display: none;
    }

    .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #F4F5F7;
    }

    .highcontrast .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #303030;
    }
</style>
<script type="text/javascript">
    var rteObj, myCodeMirror, textArea;
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();
    }
    function mirrorConversion(e) {
        var id = rteObj.getID() + 'mirror-view';
        var mirrorView = rteObj.element.querySelector('#' + id);
        var charCount = rteObj.element.querySelector('.e-rte-character-count');
        if (e.targetItem === 'Preview') {
            textArea.style.display = 'block';
            mirrorView.style.display = 'none';
            textArea.innerHTML = myCodeMirror.getValue();
            charCount.style.display = 'block';
        }
        else {
            if (!mirrorView) {
                mirrorView = ej.base.createElement('div', { className: 'e-content' });
                mirrorView.id = id;
                textArea.parentNode.appendChild(mirrorView);
            }
            else {
                mirrorView.innerHTML = '';
            }
            textArea.style.display = 'none';
            mirrorView.style.display = 'block';
            renderCodeMirror(mirrorView, defaultRTE.value);
            charCount.style.display = 'none';
        }
    }
    function renderCodeMirror(mirrorView, content) {
        myCodeMirror = CodeMirror(mirrorView, {
            value: content,
            lineNumbers: true,
            mode: 'text/html',
            lineWrapping: true,
        });
    }
    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
    function actionCompleteHandler(e) {
        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
            this.sourceCodeModule.getPanel().style.display = 'none';
            mirrorConversion(e);
        }
        else {
            setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);
        }
    }
</script>

<script type="text/javascript">
    function ContentTypes(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.ContentTypes)), query);
                }
</script>