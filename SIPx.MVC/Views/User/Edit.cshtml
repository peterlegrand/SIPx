@using Syncfusion.EJ2
@using Newtonsoft.Json
@model UserUpdateGet
@{
    var Term = (List<UITermLanguageCustomizationList>)ViewBag.UITerms;
    var ErrorMessages = (List<ErrorMessage>)ViewBag.ErrorMessages;
    ViewData["Title"] = @Term.Find(x => x.InternalName.Equals("Edit user")).TermString;

}

<h1>
    <img src="~/images/icons/User.png" width="50" height="50" />@Term.Find(x => x.InternalName.Equals("Edit user")).TermString
</h1>
<div class="container">


    <form method="post">


        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Id")).TermString
            </div>    <div class="col-9">
    <ejs-numerictextbox id="Id" ejs-for="@Model.PersonId" enabled="false" cssClass="e-outline" placeholder="PersonId" floatLabelType="Auto"></ejs-numerictextbox>
</div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Salutation")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="Salutation" ejs-for="@Model.Salutation" cssClass="e-outline" placeholder="Salutation" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("First name")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="FirstName" ejs-for="@Model.FirstName" cssClass="e-outline" placeholder="FirstName" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Salutation")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="MiddleName" ejs-for="@Model.MiddleName" cssClass="e-outline" placeholder="MiddleName" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Last name")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="LastName" ejs-for="@Model.LastName" cssClass="e-outline" placeholder="LastName" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Personal title")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="PersonalTitle" ejs-for="@Model.PersonalTitle" cssClass="e-outline" placeholder="PersonalTitle" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Suffix")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="Suffix" ejs-for="@Model.Suffix" cssClass="e-outline" placeholder="Suffix" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Nick name")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="NickName" ejs-for="@Model.NickName" cssClass="e-outline" placeholder="NickName" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Local first name")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="FirstNameLocal" ejs-for="@Model.FirstNameLocal" cssClass="e-outline" placeholder="FirstNameLocal" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Local middle name")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="MiddleNameLocal" ejs-for="@Model.MiddleNameLocal" cssClass="e-outline" placeholder="MiddleNameLocal" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Local last name")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="LastNameLocal" ejs-for="@Model.LastNameLocal" cssClass="e-outline" placeholder="LastNameLocal" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Gender")).TermString type
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="GenderId" dataSource="@Model.Genders" ejs-for="@Model.GenderId" value="@Model.GenderId" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="GenderId"></e-dropdownlist-fields>
                </ejs-dropdownlist>
            </div>
        </div>


        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Organization")).TermString 
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="DefaultOrganizationId" dataSource="@Model.Organizations" ejs-for="@Model.DefaultOrganizationId" value="@Model.DefaultOrganizationId" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="OrganizationId"></e-dropdownlist-fields>
                </ejs-dropdownlist>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Security level")).TermString 
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="SecurityLevelId" dataSource="@Model.SecurityLevels" ejs-for="@Model.SecurityLevelId" value="@Model.SecurityLevelId" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="SecurityLevelId"></e-dropdownlist-fields>
                </ejs-dropdownlist>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Birthdate")).TermString

            </div>
            <div class="col-9">
                <ejs-datepicker id="BirthDate" ejs-for="@Model.BirthDate"></ejs-datepicker>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("User name")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="UserName" ejs-for="@Model.UserName" cssClass="e-outline" placeholder="UserName" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>


        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("New password")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="NewPassword" ejs-for="@Model.NewPassword" type="password" cssClass="e-outline" placeholder="NewPassword" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Confirm password")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="ConfirmPassword" ejs-for="@Model.ConfirmPassword" type="password" cssClass="e-outline" placeholder="ConfirmPassword" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Email")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="Email" ejs-for="@Model.Email" cssClass="e-outline" placeholder="Email" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>

        <div class="row">
            <div class="col-3 offset-3">
                <ejs-button id="primarybtn" content="@Term.Find(x => x.InternalName.Equals("Save")).TermString" action="Submit" isPrimary="true"></ejs-button>
                <a asp-action="Index">@Term.Find(x => x.InternalName.Equals("Cancel")).TermString</a>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Creator")).TermString
            </div>
            <div class="col-9">
                @Model.CreatorName
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Created date")).TermString
            </div>
            <div class="col-9">
                @Model.CreatedDate
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Modifier")).TermString
            </div>
            <div class="col-9">
                @Model.ModifierName
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Modified date")).TermString
            </div>
            <div class="col-9">
                <div>@Model.ModifiedDate</div>
            </div>
        </div>
    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
<style>
    .e-code-mirror::before {
        content: '\e345';
    }

    .e-html-preview::before {
        content: '\e350';
    }

    .CodeMirror-linenumber,
    .CodeMirror-gutters {
        display: none;
    }

    .sb-header {
        z-index: 100;
    }

    .sb-content.e-view.hide-header {
        top: 0 !important;
    }

    .sb-header.e-view.hide-header {
        display: none;
    }

    .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #F4F5F7;
    }

    .highcontrast .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #303030;
    }
</style>
<script type="text/javascript">
    var rteObj, myCodeMirror, textArea;
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();
    }
    function mirrorConversion(e) {
        var id = rteObj.getID() + 'mirror-view';
        var mirrorView = rteObj.element.querySelector('#' + id);
        var charCount = rteObj.element.querySelector('.e-rte-character-count');
        if (e.targetItem === 'Preview') {
            textArea.style.display = 'block';
            mirrorView.style.display = 'none';
            textArea.innerHTML = myCodeMirror.getValue();
            charCount.style.display = 'block';
        }
        else {
            if (!mirrorView) {
                mirrorView = ej.base.createElement('div', { className: 'e-content' });
                mirrorView.id = id;
                textArea.parentNode.appendChild(mirrorView);
            }
            else {
                mirrorView.innerHTML = '';
            }
            textArea.style.display = 'none';
            mirrorView.style.display = 'block';
            renderCodeMirror(mirrorView, defaultRTE.value);
            charCount.style.display = 'none';
        }
    }
    function renderCodeMirror(mirrorView, content) {
        myCodeMirror = CodeMirror(mirrorView, {
            value: content,
            lineNumbers: true,
            mode: 'text/html',
            lineWrapping: true,
        });
    }
    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
    function actionCompleteHandler(e) {
        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
            this.sourceCodeModule.getPanel().style.display = 'none';
            mirrorConversion(e);
        }
        else {
            setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);
        }
    }
</script>
