@using Syncfusion.EJ2
@using Newtonsoft.Json
@model ClassificationPageUpdateGet
@{
    var Term = (List<UITermLanguageCustomizationList>)ViewBag.UITerms;
    ViewData["Title"] = @Term.Find(x => x.InternalName.Equals("Classification page")).TermString;

    Layout = "_LayoutAdmin";
}

<h1>
    <img src="~/images/icons/Classifications.png" width="50" height="50" />@Term.Find(x => x.InternalName.Equals("Classification page")).TermString
</h1>


<form method="post">
    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Id")).TermString ClassificationId
        </div>
        <div class="col-9">
            <ejs-numerictextbox id="ClassificationPageId" ejs-for="@Model.ClassificationPageId" cssClass="e-outline" placeholder="ClassificationPageId" floatLabelType="Auto"></ejs-numerictextbox>
        </div>
    </div>

    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Name")).TermString
        </div>    <div class="col-9">
            <ejs-textbox id="Name" ejs-for="Name" cssClass="e-outline" placeholder="Name" floatLabelType="Auto"></ejs-textbox>
        </div>
    </div>
    <div class="row">
        <div class="col-3">@Term.Find(x => x.InternalName.Equals("Description")).TermString</div>
        <div class="col-9">
            <ejs-richtexteditor ejs-for="Description" id="defaultRTE" showCharCount="true" actionBegin="handleFullScreen" actionComplete="actionCompleteHandler" maxLength="2000" created="created">
                <e-content-template>
                </e-content-template>
                <e-richtexteditor-toolbarsettings items="@ViewBag.tools">
                </e-richtexteditor-toolbarsettings>
            </ejs-richtexteditor>
        </div>
    </div>

    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Menu name")).TermString
        </div>
        <div class="col-9">
            <ejs-textbox id="MenuName" ejs-for="MenuName" cssClass="e-outline" placeholder="Menu name" floatLabelType="Auto"></ejs-textbox>
        </div>
    </div>

    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Mouse over")).TermString
        </div>
        <div class="col-9">
            <ejs-textbox id="MouseOver" ejs-for="MouseOver" cssClass="e-outline" placeholder="Mouse over" floatLabelType="Auto"></ejs-textbox>
        </div>
    </div>
    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Title name")).TermString
        </div>
        <div class="col-9">
            <ejs-textbox id="TitleName" ejs-for="TitleName" cssClass="e-outline" placeholder="Title name" floatLabelType="Auto"></ejs-textbox>
        </div>
    </div>
    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Title description")).TermString
        </div>
        <div class="col-9">
            <ejs-textbox id="TitleDescription" ejs-for="TitleDescription" cssClass="e-outline" placeholder="Title description" floatLabelType="Auto"></ejs-textbox>
        </div>
    </div>
    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Show title name")).TermString
        </div>
        <div class="col-9">
            <ejs-checkbox id="ShowTitleName" label="Show title name" ejs-for="ShowTitleName" checked="@Model.ShowTitleName"></ejs-checkbox>
        </div>
    </div>
    <div class="row">
        <div class="col-3 offset-3">
            <ejs-button id="primarybtn" content="@Term.Find(x => x.InternalName.Equals("Save")).TermString" isPrimary="true"></ejs-button>
            <ejs-button id="cancelbtn" content="@Term.Find(x => x.InternalName.Equals("Cancel")).TermString" isPrimary="false"></ejs-button>
        </div>
    </div>
    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Creator")).TermString
        </div>
        <div class="col-9">
            @Model.CreatorName
        </div>
    </div>
    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Created date")).TermString
        </div>
        <div class="col-9">
            @Model.CreatedDate
        </div>
    </div>
    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Modifier")).TermString
        </div>
        <div class="col-9">
            @Model.ModifierName
        </div>
    </div>
    <div class="row">
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Modified date")).TermString
        </div>
        <div class="col-9">
            <div>@Model.ModifiedDate</div>
        </div>
    </div>

</form>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
<style>
    .e-code-mirror::before {
        content: '\e345';
    }

    .e-html-preview::before {
        content: '\e350';
    }

    .CodeMirror-linenumber,
    .CodeMirror-gutters {
        display: none;
    }

    .sb-header {
        z-index: 100;
    }

    .sb-content.e-view.hide-header {
        top: 0 !important;
    }

    .sb-header.e-view.hide-header {
        display: none;
    }

    .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #F4F5F7;
    }

    .highcontrast .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #303030;
    }
</style>
<script type="text/javascript">
    var rteObj, myCodeMirror, textArea;
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();
    }
    function mirrorConversion(e) {
        var id = rteObj.getID() + 'mirror-view';
        var mirrorView = rteObj.element.querySelector('#' + id);
        var charCount = rteObj.element.querySelector('.e-rte-character-count');
        if (e.targetItem === 'Preview') {
            textArea.style.display = 'block';
            mirrorView.style.display = 'none';
            textArea.innerHTML = myCodeMirror.getValue();
            charCount.style.display = 'block';
        }
        else {
            if (!mirrorView) {
                mirrorView = ej.base.createElement('div', { className: 'e-content' });
                mirrorView.id = id;
                textArea.parentNode.appendChild(mirrorView);
            }
            else {
                mirrorView.innerHTML = '';
            }
            textArea.style.display = 'none';
            mirrorView.style.display = 'block';
            renderCodeMirror(mirrorView, defaultRTE.value);
            charCount.style.display = 'none';
        }
    }
    function renderCodeMirror(mirrorView, content) {
        myCodeMirror = CodeMirror(mirrorView, {
            value: content,
            lineNumbers: true,
            mode: 'text/html',
            lineWrapping: true,
        });
    }
    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
    function actionCompleteHandler(e) {
        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
            this.sourceCodeModule.getPanel().style.display = 'none';
            mirrorConversion(e);
        }
        else {
            setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);
        }
    }
</script>
