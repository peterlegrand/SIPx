@using Syncfusion.EJ2
@using Newtonsoft.Json
@model FrontContentContentNew
@{
    var AllStuff = (ViewBagModel)ViewBag.AllStuff;
    //var AllStuff = (ViewBagModel)ViewBag.AllStuff;
    var ErrorMessages = (List<ErrorMessage>)ViewBag.ErrorMessages;
    ViewData["Title"] = AllStuff.UITerms.Find(x => x.InternalName.Equals("New content")).TermString;
    ViewData["Image"] = "Content.png";
    ViewData["FavoriteGroup"] = AllStuff.FavoriteGroupList;

    Layout = "_Layout";
}

<div class="container">

    <form method="post">
        @if (AllStuff.Env == "Production")
        {
            <div hidden class="row">
                <div class="col-3">
                    @AllStuff.UITerms.Find(x => x.InternalName.Equals("Id")).TermString
                </div>
                <div class="col-9">
                    <ejs-numerictextbox id="ContentTypeId" ejs-for="@Model.ContentTypeId" cssClass="e-outline" placeholder="ContentTypeID" floatLabelType="Auto"></ejs-numerictextbox>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-3">
                    @AllStuff.UITerms.Find(x => x.InternalName.Equals("Id")).TermString
                </div>
                <div class="col-9">
                    <ejs-numerictextbox id="ContentTypeId" ejs-for="@Model.ContentTypeId" cssClass="e-outline" placeholder="ContentTypeID" floatLabelType="Auto"></ejs-numerictextbox>
                </div>
            </div>
        }


        <div class="row">
            <div class="col-3">
                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Name")).TermString
            </div>    <div class="col-9">
                @Model.ContentTypeName
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @*                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Name")).TermString*@
                Title
            </div>    <div class="col-9">
                <ejs-textbox id="Title" ejs-for="@Model.Title" cssClass="e-outline" placeholder="Title" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            @*   <div class="col-3">@AllStuff.UITerms.Find(x => x.InternalName.Equals("Description")).TermString</div>*@
            <div class="offset-3 col-9">

                <div class="input-group">
                    <textarea class="editor" name="Description"></textarea>
                </div>
                @*<ejs-richtexteditor ejs-for="Description" id="defaultRTE" showCharCount="true" actionBegin="handleFullScreen" actionComplete="actionCompleteHandler" maxLength="2000" created="created">
                        <e-content-template>
                        </e-content-template>
                        <e-richtexteditor-toolbarsettings items="@ViewBag.tools">
                        </e-richtexteditor-toolbarsettings>
                    </ejs-richtexteditor>*@
            </div>
        </div>


        <div class="row">
            <div class="col-3">
                @*                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Default page")).TermString*@
                Organizations
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="OrganizationId" dataSource="@Model.Organizations" ejs-for="@Model.OrganizationId" value="@Model.OrganizationId" index="2" filtering="FilterDefaultPage" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="OrganizationId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @*                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Default page")).TermString*@
                Projects
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="ProjectId" dataSource="@Model.Projects" ejs-for="@Model.ProjectId" value="@Model.ProjectId" index="2" filtering="FilterDefaultPage" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="ProjectId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @*                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Default page")).TermString*@
                Status
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="ContentStatusId" dataSource="@Model.ContentStatuses" ejs-for="@Model.ContentStatusId" value="@Model.ContentStatusId" index="2" filtering="FilterDefaultPage" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="ContentStatusId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @*                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Default page")).TermString*@
                Language
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="LanguageId" dataSource="@Model.Languages" ejs-for="@Model.LanguageId" value="@Model.LanguageId" index="2" filtering="FilterDefaultPage" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="LanguageId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @*                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Default page")).TermString*@
                SecurityLevel
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="SecurityLevelId" dataSource="@Model.SecurityLevels" ejs-for="@Model.SecurityLevelId" value="@Model.SecurityLevelId" index="2" filtering="FilterDefaultPage" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="SecurityLevelId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>
        @for (int i = 0; i < Model.Classifications.Count; i++)
        // @foreach (var classification in Model.Classifications)
        {

            <div class="row">
                <div class="col-3">
                    @Model.Classifications[i].ClassificationName
                    <ejs-numerictextbox id="@Model.Classifications[i].ControlB" ejs-for="@Model.Classifications[i].ClassificationId" cssClass="e-outline" placeholder="ClassificationId" floatLabelType="Auto"></ejs-numerictextbox>
                    @*                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Default page")).TermString*@
                    @Model.Classifications[i].ClassificationName
                </div>
                <div class="col-9">
                    @Model.Classifications[i].ControlA
                    <ejs-dropdownlist id="@Model.Classifications[i].ControlA" dataSource="@Model.Classifications[i].ClassificationValues" ejs-for="@Model.Classifications[i].ClassificationValueId" value="@Model.Classifications[i].ClassificationValueId" index="2" filtering="FilterDefaultPage" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="ClassificationValueId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>

        }
        <div class="row">
            <div class="offset-3 col-9">
                <table>
                    <tr>
                        <th colspan="2" style="width:50%;"></th>
                        <th style="width:25%;">@AllStuff.UITerms.Find(x => x.InternalName.Equals("Edit")).TermString</th>
                        <th style="width:25%;">@AllStuff.UITerms.Find(x => x.InternalName.Equals("Read")).TermString</th>
                    </tr>
                    <tr>
                        <td colspan="2">@AllStuff.UITerms.Find(x => x.InternalName.Equals("Any")).TermString</td>
                        @if (Model.IsFreeEditSelectable)
                        {
                            <td><ejs-checkbox id="IsFreeEdit" ejs-for="@Model.IsFreeEdit"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsFreeEdit" ejs-for="@Model.IsFreeEdit"></ejs-checkbox></td>

                        }
                        @if (Model.IsFreeReadSelectable)
                        {
                            <td><ejs-checkbox id="IsFreeRead" ejs-for="@Model.IsFreeRead"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsFreeRead" ejs-for="@Model.IsFreeRead"></ejs-checkbox></td>
                        }
                        <td></td>
                    </tr>
                    <tr>
                        <td colspan="2">@AllStuff.UITerms.Find(x => x.InternalName.Equals("Organization based")).TermString</td>
                        @if (Model.IsOrganizationBasedEditSelectable)
                        {
                            <td><ejs-checkbox id="IsOrganizationBasedEdit" ejs-for="@Model.IsOrganizationBasedEdit"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsOrganizationBasedEdit" ejs-for="@Model.IsOrganizationBasedEdit"></ejs-checkbox></td>
                        }
                        @if (Model.IsOrganizationBasedReadSelectable)
                        {
                            <td><ejs-checkbox id="IsOrganizationBasedRead" ejs-for="@Model.IsOrganizationBasedRead"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsOrganizationBasedRead" ejs-for="@Model.IsOrganizationBasedRead"></ejs-checkbox></td>
                        }

                    </tr>
                    <tr>
                        <td></td>
                        <td>@AllStuff.UITerms.Find(x => x.InternalName.Equals("Incl. subs")).TermString</td>
                        @if (Model.IsOrganizationBasedEditSelectable)
                        {
                            <td><ejs-checkbox id="IsOrganizationBasedEditSub" ejs-for="@Model.IsOrganizationBasedEditSub"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsOrganizationBasedEditSub" ejs-for="@Model.IsOrganizationBasedEditSub"></ejs-checkbox></td>

                        }
                        @if (Model.IsOrganizationBasedReadSelectable)
                        {
                            <td><ejs-checkbox id="IsOrganizationBasedReadSub" ejs-for="@Model.IsOrganizationBasedReadSub"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsOrganizationBasedReadSub" ejs-for="@Model.IsOrganizationBasedReadSub"></ejs-checkbox></td>
                        }

                    </tr>
                    <tr>
                        <td></td>
                        <td>@AllStuff.UITerms.Find(x => x.InternalName.Equals("Incl. parents")).TermString</td>
                        @if (Model.IsOrganizationBasedEditSelectable)
                        {
                            <td><ejs-checkbox id="IsOrganizationBasedEditParent" ejs-for="@Model.IsOrganizationBasedEditParent"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsOrganizationBasedEditParent" ejs-for="@Model.IsOrganizationBasedEditParent"></ejs-checkbox></td>

                        }
                        @if (Model.IsOrganizationBasedReadSelectable)
                        {
                            <td><ejs-checkbox id="IsOrganizationBasedReadParent" ejs-for="@Model.IsOrganizationBasedReadParent"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsOrganizationBasedReadParent" ejs-for="@Model.IsOrganizationBasedReadParent"></ejs-checkbox></td>
                        }
                    </tr>
                    <tr>
                        <td colspan="2">@AllStuff.UITerms.Find(x => x.InternalName.Equals("Project based")).TermString</td>
                        @if (Model.IsProjectBasedEditSelectable)
                        {
                            <td><ejs-checkbox id="IsProjectBasedEdit" ejs-for="@Model.IsProjectBasedEdit"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsProjectBasedEdit" ejs-for="@Model.IsProjectBasedEdit"></ejs-checkbox></td>

                        }
                        @if (Model.IsProjectBasedReadSelectable)
                        {
                            <td><ejs-checkbox id="IsProjectBasedRead" ejs-for="@Model.IsProjectBasedRead"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsProjectBasedRead" ejs-for="@Model.IsProjectBasedRead"></ejs-checkbox></td>
                        }

                    </tr>
                    <tr>
                        <td></td>
                        <td>@AllStuff.UITerms.Find(x => x.InternalName.Equals("Incl. subs")).TermString</td>
                        @if (Model.IsProjectBasedEditSelectable)
                        {
                            <td><ejs-checkbox id="IsProjectBasedEditSub" ejs-for="@Model.IsProjectBasedEditSub"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsProjectBasedEditSub" ejs-for="@Model.IsProjectBasedEditSub"></ejs-checkbox></td>

                        }
                        @if (Model.IsProjectBasedReadSelectable)
                        {
                            <td><ejs-checkbox id="IsProjectBasedReadSub" ejs-for="@Model.IsProjectBasedReadSub"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsProjectBasedReadSub" ejs-for="@Model.IsProjectBasedReadSub"></ejs-checkbox></td>
                        }

                    </tr>
                    <tr>
                        <td></td>
                        <td>@AllStuff.UITerms.Find(x => x.InternalName.Equals("Incl. parents")).TermString</td>
                        @if (Model.IsProjectBasedEditSelectable)
                        {
                            <td><ejs-checkbox id="IsProjectBasedEditParent" ejs-for="@Model.IsProjectBasedEditParent"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsProjectBasedEditParent" ejs-for="@Model.IsProjectBasedEditParent"></ejs-checkbox></td>

                        }
                        @if (Model.IsProjectBasedReadSelectable)
                        {
                            <td><ejs-checkbox id="IsProjectBasedReadParent" ejs-for="@Model.IsProjectBasedReadParent"></ejs-checkbox></td>
                        }
                        else
                        {
                            <td><ejs-checkbox disabled="true" id="IsProjectBasedReadParent" ejs-for="@Model.IsProjectBasedReadParent"></ejs-checkbox></td>
                        }
                    </tr>
                </table>
            </div>
        </div>
        <div class="row">
            <div class="col-3 offset-3">
                @*<ejs-button id="primarybtn" content="@AllStuff.UITerms.Find(x => x.InternalName.Equals("Save")).TermString" action="Submit" isPrimary="true"></ejs-button>
                    <ejs-button id="cancelbtn" content="@AllStuff.UITerms.Find(x => x.InternalName.Equals("Cancel")).TermString" isPrimary="false"></ejs-button>*@
                <ejs-button id="primarybtn" content="Save" action="Submit" isPrimary="true"></ejs-button>
                <ejs-button id="cancelbtn" content="Cancel" isPrimary="false"></ejs-button>

            </div>
        </div>

    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
<style>
    .e-code-mirror::before {
        content: '\e345';
    }

    .e-html-preview::before {
        content: '\e350';
    }

    .CodeMirror-linenumber,
    .CodeMirror-gutters {
        display: none;
    }

    .sb-header {
        z-index: 100;
    }

    .sb-content.e-view.hide-header {
        top: 0 !important;
    }

    .sb-header.e-view.hide-header {
        display: none;
    }

    .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #F4F5F7;
    }

    .highcontrast .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #303030;
    }
</style>
<script type="text/javascript">
    var rteObj, myCodeMirror, textArea;
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();
    }
    function mirrorConversion(e) {
        var id = rteObj.getID() + 'mirror-view';
        var mirrorView = rteObj.element.querySelector('#' + id);
        var charCount = rteObj.element.querySelector('.e-rte-character-count');
        if (e.targetItem === 'Preview') {
            textArea.style.display = 'block';
            mirrorView.style.display = 'none';
            textArea.innerHTML = myCodeMirror.getValue();
            charCount.style.display = 'block';
        }
        else {
            if (!mirrorView) {
                mirrorView = ej.base.createElement('div', { className: 'e-content' });
                mirrorView.id = id;
                textArea.parentNode.appendChild(mirrorView);
            }
            else {
                mirrorView.innerHTML = '';
            }
            textArea.style.display = 'none';
            mirrorView.style.display = 'block';
            renderCodeMirror(mirrorView, defaultRTE.value);
            charCount.style.display = 'none';
        }
    }
    function renderCodeMirror(mirrorView, content) {
        myCodeMirror = CodeMirror(mirrorView, {
            value: content,
            lineNumbers: true,
            mode: 'text/html',
            lineWrapping: true,
        });
    }
    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
    function actionCompleteHandler(e) {
        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
            this.sourceCodeModule.getPanel().style.display = 'none';
            mirrorConversion(e);
        }
        else {
            setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);
        }
    }
</script>
<script type="text/javascript">
    function FilterDefaultPage(e) {
                var query = new ej.data.Query();
                query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.Organizations)), query);
            }
</script>
<script type="text/javascript">
    function FilterStatus(e) {
                var query = new ej.data.Query();
                query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.Organizations)), query);
            }
</script>
@section Scripts {
    <script src="https://cdn.tiny.cloud/1/svu6dnfyewblchl3t3fki9nw85tzj1r1h9vwbpbg42mnv4ez/tinymce/5/tinymce.min.js"></script>

    <script type="text/javascript">
        tinymce.init({
            selector: 'textarea.editor',
            height: 500,
            width: 800,
            plugins: "image", // add the image plugin
            toolbar: 'image', // add the image button to the toolbar
            images_upload_handler: function (blobInfo, success, failure) {

                // Create a JSON payload containing the file name and file bytes and serialize it to a string
                var data = JSON.stringify({ fileBytes: blobInfo.base64(), fileName: blobInfo.blob().name });

                $.ajax({
                    type: 'POST',
                    url: '/api/Image',
                    //                        url: 'https://localhost:44393/api/Image',
                    data: data,
                    dataType: 'json',
                    contentType: 'application/json',
                    success: function (result) {
                        success(result.imageUrl);
                    },
                    error: function (xhr, status, error) {
                        var err = eval("(" + xhr.responseText + ")");
                        failure(err.message);
                    }
                });
            }
        });
    </script>
}