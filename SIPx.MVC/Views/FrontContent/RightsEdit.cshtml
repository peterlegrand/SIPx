@using Syncfusion.EJ2
@using Newtonsoft.Json
@model FrontContentRightsUpdateGet
@{
    var Term = (List<UITermLanguageCustomizationList>)ViewBag.UITerms;
    var ErrorMessages = (List<ErrorMessage>)ViewBag.ErrorMessages;
    ViewData["Title"] = @Term.Find(x => x.InternalName.Equals("Edit content rights")).TermString;

    Layout = "_Layout";
}

<h1>
    <img src="~/images/icons/Content.png" width="50" height="50" /> @Term.Find(x => x.InternalName.Equals("Edit content rights")).TermString
</h1>
<div class="container">

    <form method="post">

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Content id")).TermString 
            </div>
            <div class="col-9">
                <ejs-numerictextbox id="ContentId" ejs-for="@Model.ContentId" cssClass="e-outline" placeholder="ContentTypeID" floatLabelType="Auto"></ejs-numerictextbox>
            </div>
        </div>
        @if (Model.IsFreeOwnership || Model.IsProjectBasedOwnership || Model.IsOrganizationBasedOwnership || Model.IsRelationBasedOwnership) { }
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Owner")).TermString 
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="Ownership" dataSource="@Model.Owners" ejs-for="@Model.OwnerId" value="@Model.OwnerId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="UserId"></e-dropdownlist-fields>
                </ejs-dropdownlist>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @*                @Term.Find(x => x.InternalName.Equals("Name")).TermString*@
                @Term.Find(x => x.InternalName.Equals("Free edit")).TermString 
            </div>
            @if (Model.IsFreeEditSelectable)
            {
                <div class="col-9">
                    <ejs-checkbox id="IsFreeEdit" ejs-for="@Model.IsFreeEdit" value="@Model.IsFreeEdit"></ejs-checkbox>
                </div>
            }
            else
            {
                <div class="col-9">
                    <ejs-checkbox disabled="true" id="IsFreeEdit" ejs-for="@Model.IsFreeEdit" value="@Model.IsFreeEdit"></ejs-checkbox>
                </div>

            }
        </div>


        <div class="row">
            @if (Model.IsProjectBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project edit")).TermString 
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsProjectBasedEdit" ejs-for="@Model.IsProjectBasedEdit" value="@Model.IsProjectBasedEdit"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsProjectBasedEditSelectable)
            {<div class="col-3">
                    @*                @Term.Find(x => x.InternalName.Equals("Name")).TermString*@
                    @Term.Find(x => x.InternalName.Equals("Project edit")).TermString 
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsProjectBasedEdit" ejs-for="@Model.IsProjectBasedEdit" value="@Model.IsProjectBasedEdit"></ejs-checkbox>
                </div>
            }
            @if (Model.IsProjectBasedReadSelectable)
            {<div class="col-3">
                    @*                @Term.Find(x => x.InternalName.Equals("Name")).TermString*@
                    @Term.Find(x => x.InternalName.Equals("Project read")).TermString 
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsProjectBasedRead" ejs-for="@Model.IsProjectBasedRead" value="@Model.IsProjectBasedRead"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsProjectBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project read")).TermString 
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsProjectBasedRead" ejs-for="@Model.IsProjectBasedRead" value="@Model.IsProjectBasedRead"></ejs-checkbox>
                </div>
            }
        </div>
        <div class="row">
            @if (Model.IsProjectBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project edit sub")).TermString 
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsProjectBasedEditSub" ejs-for="@Model.IsProjectBasedEditSub" value="@Model.IsProjectBasedEditSub"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsProjectBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project edit sub")).TermString 
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsProjectBasedEditSub" ejs-for="@Model.IsProjectBasedEditSub" value="@Model.IsProjectBasedEditSub"></ejs-checkbox>
                </div>
            }
            @if (Model.IsProjectBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project read sub")).TermString 
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsProjectBasedReadSub" ejs-for="@Model.IsProjectBasedReadSub" value="@Model.IsProjectBasedReadSub"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsProjectBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project read sub")).TermString 
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsProjectBasedReadSub" ejs-for="@Model.IsProjectBasedReadSub" value="@Model.IsProjectBasedReadSub"></ejs-checkbox>
                </div>
            }
        </div>
        <div class="row">
            @if (Model.IsProjectBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project edit parent")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsProjectBasedEditParent" ejs-for="@Model.IsProjectBasedEditParent" value="@Model.IsProjectBasedEditParent"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsProjectBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project edit parent")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsProjectBasedEditParent" ejs-for="@Model.IsProjectBasedEditParent" value="@Model.IsProjectBasedEditParent"></ejs-checkbox>
                </div>
            }
            @if (Model.IsProjectBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project read parent")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsProjectBasedReadParent" ejs-for="@Model.IsProjectBasedReadParent" value="@Model.IsProjectBasedReadParent"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsProjectBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project read parent")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsProjectBasedReadParent" ejs-for="@Model.IsProjectBasedReadParent" value="@Model.IsProjectBasedReadParent"></ejs-checkbox>
                </div>
            }
        </div>
        <div class="row">
            @if (Model.IsOrganizationBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization edit")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsOrganizationBasedEdit" ejs-for="@Model.IsOrganizationBasedEdit" value="@Model.IsOrganizationBasedEdit"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsOrganizationBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization edit")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsOrganizationBasedEdit" ejs-for="@Model.IsOrganizationBasedEdit" value="@Model.IsOrganizationBasedEdit"></ejs-checkbox>
                </div>
            }
            @if (Model.IsOrganizationBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization read")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsOrganizationBasedRead" ejs-for="@Model.IsOrganizationBasedRead" value="@Model.IsOrganizationBasedRead"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsOrganizationBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization read")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsOrganizationBasedRead" ejs-for="@Model.IsOrganizationBasedRead" value="@Model.IsOrganizationBasedRead"></ejs-checkbox>
                </div>
            }
        </div>
        <div class="row">
            @if (Model.IsOrganizationBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization edit sub")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsOrganizationBasedEditSub" ejs-for="@Model.IsOrganizationBasedEditSub" value="@Model.IsOrganizationBasedEditSub"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsOrganizationBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization edit sub")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsOrganizationBasedEditSub" ejs-for="@Model.IsOrganizationBasedEditSub" value="@Model.IsOrganizationBasedEditSub"></ejs-checkbox>
                </div>
            }
            @if (Model.IsOrganizationBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization read sub")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsOrganizationBasedReadSub" ejs-for="@Model.IsOrganizationBasedReadSub" value="@Model.IsOrganizationBasedReadSub"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsOrganizationBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization read sub")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsOrganizationBasedReadSub" ejs-for="@Model.IsOrganizationBasedReadSub" value="@Model.IsOrganizationBasedReadSub"></ejs-checkbox>
                </div>
            }
        </div>
        <div class="row">
            @if (Model.IsOrganizationBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization edit parent")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsOrganizationBasedEditParent" ejs-for="@Model.IsOrganizationBasedEditParent" value="@Model.IsOrganizationBasedEditParent"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsOrganizationBasedEditSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization edit parent")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsOrganizationBasedEditParent" ejs-for="@Model.IsOrganizationBasedEditParent" value="@Model.IsOrganizationBasedEditParent"></ejs-checkbox>
                </div>
            }
            @if (Model.IsOrganizationBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization read parent")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsOrganizationBasedReadParent" ejs-for="@Model.IsOrganizationBasedReadParent" value="@Model.IsOrganizationBasedReadParent"></ejs-checkbox>
                </div>
            }
            @if (!Model.IsOrganizationBasedReadSelectable)
            {<div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization read parent")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox disabled="true" id="IsOrganizationBasedReadParent" ejs-for="@Model.IsOrganizationBasedReadParent" value="@Model.IsOrganizationBasedReadParent"></ejs-checkbox>
                </div>
            }
        </div>


        <div class="row">
            @if (Model.DefaultIsRelationBasedEdit)
            {
                <div class="col-3">
                                    @Term.Find(x => x.InternalName.Equals("Relation edit")).TermString
                </div>
                <div class="col-3">
                    <ejs-checkbox id="IsRelationBasedEdit" ejs-for="@Model.IsRelationBasedEdit" value="@Model.IsRelationBasedEdit"></ejs-checkbox>
                </div>
            }
            @if (Model.DefaultIsRelationBasedRead)
            {
        <div class="col-3">
            @Term.Find(x => x.InternalName.Equals("Relation read")).TermString
        </div>
                <div class="col-3">
                    <ejs-checkbox id="IsRelationBasedRead" ejs-for="@Model.IsRelationBasedRead" value="@Model.IsRelationBasedRead"></ejs-checkbox>
                </div>
            }
        </div>
        @if (Model.IsProjectBasedEditSelectable || Model.IsProjectBasedEditSelectable || Model.IsRelationBasedEditSelectable || Model.IsProjectBasedEditSelectable || Model.IsProjectBasedReadSelectable || Model.IsRelationBasedReadSelectable)
        {
            <div class="row">
                @if (Model.IsProjectBasedEditSelectable || Model.IsProjectBasedEditSelectable || Model.IsRelationBasedEditSelectable)
                {
                    <div class="col-3">
                                        @Term.Find(x => x.InternalName.Equals("Select edit users")).TermString
                    </div>
                    <div class="col-3">
                        <a asp-controller="FrontContent" asp-action="RightsEditUserIndex" asp-route-id="@Model.ContentId"><img src="~/images/icons/Group.png" width="20" height="20" /></a>
                    </div>
                }
                else
                {<div class="col-3">
                    </div>
                    <div class="col-3">
                    </div>
                }
                @if (Model.IsProjectBasedReadSelectable || Model.IsProjectBasedReadSelectable || Model.IsRelationBasedReadSelectable)
                {<div class="col-3">
    @Term.Find(x => x.InternalName.Equals("Select read users")).TermString
</div>
                    <div class="col-3">
                        <a asp-controller="FrontContent" asp-action="RightsReadUsers" asp-route-id="@Model.ContentId"><img src="~/images/icons/Group.png" width="20" height="20" /></a>
                    </div>
                }
                else
                {<div class="col-3">
                    </div>
                    <div class="col-3">
                    </div>
                }
            </div>
        }


        <div class="row">
            <div class="col-3 offset-3">
                <ejs-button id="primarybtn" content="@Term.Find(x => x.InternalName.Equals("Save")).TermString" action="Submit" isPrimary="true"></ejs-button>
                    <ejs-button id="cancelbtn" content="@Term.Find(x => x.InternalName.Equals("Cancel")).TermString" isPrimary="false"></ejs-button>

            </div>
        </div>

    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
<style>
    .e-code-mirror::before {
        content: '\e345';
    }

    .e-html-preview::before {
        content: '\e350';
    }

    .CodeMirror-linenumber,
    .CodeMirror-gutters {
        display: none;
    }

    .sb-header {
        z-index: 100;
    }

    .sb-content.e-view.hide-header {
        top: 0 !important;
    }

    .sb-header.e-view.hide-header {
        display: none;
    }

    .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #F4F5F7;
    }

    .highcontrast .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #303030;
    }
</style>
<script type="text/javascript">
    var rteObj, myCodeMirror, textArea;
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();
    }
    function mirrorConversion(e) {
        var id = rteObj.getID() + 'mirror-view';
        var mirrorView = rteObj.element.querySelector('#' + id);
        var charCount = rteObj.element.querySelector('.e-rte-character-count');
        if (e.targetItem === 'Preview') {
            textArea.style.display = 'block';
            mirrorView.style.display = 'none';
            textArea.innerHTML = myCodeMirror.getValue();
            charCount.style.display = 'block';
        }
        else {
            if (!mirrorView) {
                mirrorView = ej.base.createElement('div', { className: 'e-content' });
                mirrorView.id = id;
                textArea.parentNode.appendChild(mirrorView);
            }
            else {
                mirrorView.innerHTML = '';
            }
            textArea.style.display = 'none';
            mirrorView.style.display = 'block';
            renderCodeMirror(mirrorView, defaultRTE.value);
            charCount.style.display = 'none';
        }
    }
    function renderCodeMirror(mirrorView, content) {
        myCodeMirror = CodeMirror(mirrorView, {
            value: content,
            lineNumbers: true,
            mode: 'text/html',
            lineWrapping: true,
        });
    }
    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
    function actionCompleteHandler(e) {
        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
            this.sourceCodeModule.getPanel().style.display = 'none';
            mirrorConversion(e);
        }
        else {
            setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);
        }
    }
</script>
@*<script type="text/javascript">
        function FilterDefaultPage(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.Organizations)), query);
                }
    </script>
    <script type="text/javascript">
        function FilterStatus(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.Organizations)), query);
                }
    </script>*@