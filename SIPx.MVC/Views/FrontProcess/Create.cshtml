@using Syncfusion.EJ2
@using Newtonsoft.Json
@model FrontProcessNewProcessWithMaster
@{
    var Term = (List<UITermLanguageCustomizationList>)ViewBag.UITerms;
    var ErrorMessages = (List<ErrorMessage>)ViewBag.ErrorMessages;
    ViewData["Title"] = @Term.Find(x => x.InternalName.Equals("Create new process")).TermString;

    Layout = "_Layout"; }
@*<script type="text/javascript">
        @
    </script>*@

<h1><img src="~/images/icons/Process.png" width="50" height="50" />&nbsp;@Term.Find(x => x.InternalName.Equals("Create new process")).TermString</h1><a data-toggle="modal" data-target="#exampleModal" style="cursor: pointer">
    <img src="~/images/icons/Favorites.png" width="20" height="20" title="@Term.Find(x => x.InternalName.Equals("Add favorite")).TermString" />
</a>

<div class=" control-section">
    <div class="container">
        <form method="post">
            <p hidden>
                <ejs-numerictextbox id="ProcessTemplateId" ejs-for="@Model.ProcessTemplateId"></ejs-numerictextbox>
            </p>
            @*  @Html.EditorForModel()*@
            @for (int i = 0; i < Model.ProcessFields.Count; i++)
            {

                <div hidden>FieldId</div>
                <p hidden>
                    <ejs-numerictextbox id="@Model.ProcessFields[i].ControlIdProcessTemplateFieldId" ejs-for="@Model.ProcessFields[i].ProcessTemplateFieldId"></ejs-numerictextbox>
                    <ejs-numerictextbox id="@Model.ProcessFields[i].ControlIdProcessTemplateFieldTypeId" ejs-for="@Model.ProcessFields[i].ProcessTemplateFieldTypeId"></ejs-numerictextbox>
                </p>
                if (new[] { 3, 4 }.Contains(Model.ProcessFields[i].ProcessTemplateStageFieldStatusId))
                {
                    <div class="row">
                        @if (new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 16, 32 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div class="font-weight-bold col-4">@Model.ProcessFields[i].Name</div>
                        }
                        @if (new[] { 1, 2 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div class="col-8">
                                <ejs-textbox onfocusout="@Model.ProcessFields[i].ControlIdOnFocusOutFunction" id="@Model.ProcessFields[i].ControlId" ejs-for="ProcessFields[i].StringValue"></ejs-textbox>
                                @if (Model.ProcessFields[i].ProcessTemplateStageFieldStatusId == 4)
                                {
                                    <div class="text-danger">@Term.Find(x => x.InternalName.Equals("Required")).TermString</div>
                                    <div class="bg-danger" style="display:none" id="@Model.ProcessFields[i].ControlIdWarning">@Model.ProcessFields[i].MissingValueText</div>
                                }
                            </div>
                        }
                        @if (new[] { 3 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div class="col-8">
                                <ejs-numerictextbox onfocusout="@Model.ProcessFields[i].ControlIdOnFocusOutFunction" id="@Model.ProcessFields[i].ControlId" ejs-for="@Model.ProcessFields[i].IntValue" value="@Model.ProcessFields[i].IntValue"></ejs-numerictextbox>
                                @if (Model.ProcessFields[i].ProcessTemplateStageFieldStatusId == 4)
                                {
                                    <div class="text-danger">@Term.Find(x => x.InternalName.Equals("Required")).TermString</div>
                                    <div class="bg-danger style="display:none" id="@Model.ProcessFields[i].ControlIdWarning">@Model.ProcessFields[i].MissingValueText</div>
                                }
                            </div>
                        }
                        @if (new[] { 4, 5, 6, 7, 8, 9 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div class="col-8">
                                <div id="wrapper" class="datepicker-section">
                                    <ejs-datepicker onfocusout="@Model.ProcessFields[i].ControlIdOnFocusOutFunction" allowEdit="true" id="@Model.ProcessFields[i].ControlId" calendarMode="Gregorian" dayHeaderFormat="Narrow" placeholder="Choose a Date" ejs-for="@Model.ProcessFields[i].DateTimeValue"></ejs-datepicker>
                                    @if (Model.ProcessFields[i].ProcessTemplateStageFieldStatusId == 4)
                                    {
                                        <div class="text-danger">@Term.Find(x => x.InternalName.Equals("Required")).TermString</div>
                                        <div class="bg-danger" style="display:none" id="@Model.ProcessFields[i].ControlIdWarning">@Model.ProcessFields[i].MissingValueText</div>
                                    }
                                </div>
                            </div>
                        }
                        @if (new[] { 10 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div class="offset-4 col-8">
                                <ejs-button isPrimary="true" name="submit" action="submit" value="@Model.ProcessFields[i].ControlId" id="submit">@Model.ProcessFields[i].Name</ejs-button>
                            </div>
                        }
                        @if (new[] { 11 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div class="offset-4 col-8">
                                <ejs-button isPrimary="false" name="submit" action="submit" value="@Model.ProcessFields[i].ControlId" id="submit">@Model.ProcessFields[i].Name</ejs-button>
                            </div>
                        }
                        @if (new[] { 12 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div class="col-8">
                                <ejs-dropdownlist onfocusout="@Model.ProcessFields[i].ControlIdOnFocusOutFunction" dataSource="@Model.Users" ejs-for="@Model.ProcessFields[i].StringValue" id="@Model.ProcessFields[i].ControlId">
                                    <e-dropdownlist-fields text="Name" value="UserId"></e-dropdownlist-fields>
                                </ejs-dropdownlist>
                                @if (Model.ProcessFields[i].ProcessTemplateStageFieldStatusId == 4)
                                {
                                    <div class="text-danger">@Term.Find(x => x.InternalName.Equals("Required")).TermString</div>
                                    <div class="bg-danger" style="display:none" id="@Model.ProcessFields[i].ControlIdWarning">@Model.ProcessFields[i].MissingValueText</div>
                                }
                            </div>
                        }
                        @if (new[] { 16 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div class="col-8">
                                <ejs-dropdownlist onfocusout="@Model.ProcessFields[i].ControlIdOnFocusOutFunction" dataSource="@Model.Projects" ejs-for="@Model.ProcessFields[i].IntValue" id="@Model.ProcessFields[i].ControlId">
                                    <e-dropdownlist-fields text="Name" value="ProjectId"></e-dropdownlist-fields>
                                </ejs-dropdownlist>
                                @if (Model.ProcessFields[i].ProcessTemplateStageFieldStatusId == 4)
                                {
                                    <div class="text-danger">@Term.Find(x => x.InternalName.Equals("Required")).TermString</div>
                                    <div class="bg-danger" style="display:none" id="@Model.ProcessFields[i].ControlIdWarning">@Model.ProcessFields[i].MissingValueText</div>
                                }
                            </div>
                        }
                        @if (new[] { 32 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div class="col-8">
                                <ejs-richtexteditor onfocusout="@Model.ProcessFields[i].ControlIdOnFocusOutFunction" ejs-for="@Model.ProcessFields[i].HTMLStringValue" value="@Model.ProcessFields[i].HTMLStringValue" id="@Model.ProcessFields[i].ControlId" showCharCount="true" actionBegin="handleFullScreen" actionComplete="actionCompleteHandler" maxLength="2000" created="created">
                                    <e-content-template>
                                    </e-content-template>
                                    <e-richtexteditor-toolbarsettings items="@ViewBag.tools">
                                    </e-richtexteditor-toolbarsettings>
                                </ejs-richtexteditor>
                                @if (Model.ProcessFields[i].ProcessTemplateStageFieldStatusId == 4)
                                {
                                    <div>@Term.Find(x => x.InternalName.Equals("Required")).TermString</div>
                                    <div class="bg-danger" style="display:none" id="@Model.ProcessFields[i].ControlIdWarning">@Model.ProcessFields[i].MissingValueText</div>
                                }
                            </div>
                        }
                    </div>

                }
                if (new[] { 2 }.Contains(Model.ProcessFields[i].ProcessTemplateStageFieldStatusId))
                {
                    <div class="row">
                        @if (new[] { 1, 2, 3, 4, 5, 6, 7, 8, 9, 12, 16, 32 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div class="font-weight-bold col-4">@Model.ProcessFields[i].Name</div>
                        }
                        @if (new[] { 1, 2 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId) && Model.ProcessFields[i].ProcessTemplateStageFieldStatusId == 2)
                        {
                            <div class="col-8"> @Model.ProcessFields[i].StringValue</div>
                        }

                        @if (new[] { 32 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId) && Model.ProcessFields[i].ProcessTemplateStageFieldStatusId == 2)
                        {
                            <div class="col-8">
                                <div class="col-9">
                                    @Html.Raw(Model.ProcessFields[i].StringValue)
                                </div>
                            </div>
                        }
                        @if (new[] { 1, 2, 32 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div hidden>
                                <ejs-textbox ejs-for="@Model.ProcessFields[i].StringValue" value="@Model.ProcessFields[i].StringValue" id="@Model.ProcessFields[i].ControlId"></ejs-textbox>
                            </div>
                        }
                    </div>
                }
                if (new[] { 1 }.Contains(Model.ProcessFields[i].ProcessTemplateStageFieldStatusId))
                {
                    <div class="row">
                        @if (new[] { 1, 2, 32 }.Contains(Model.ProcessFields[i].ProcessTemplateFieldTypeId))
                        {
                            <div hidden>
                                <ejs-textbox ejs-for="@Model.ProcessFields[i].StringValue" value="@Model.ProcessFields[i].StringValue" id="@Model.ProcessFields[i].ControlId"></ejs-textbox>
                            </div>
                        }
                    </div>
                }
            }
            @*<ejs-textbox id="TestText" onfocusout="myFunction()"></ejs-textbox>
                <ejs-dropdownlist dataSource="@Model.Users" ejs-for="@Model.ProcessTemplateFlowId" id="frutje">
                    <e-dropdownlist-fields text="Name" value="UserId"></e-dropdownlist-fields>
                </ejs-dropdownlist>*@

        </form>
    </div>
</div>
<!--  DashboardLayout element declaration -->
@*<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
    <style>
        .e-code-mirror::before {
            content: '\e345';
        }

        .e-html-preview::before {
            content: '\e350';
        }

        .CodeMirror-linenumber,
        .CodeMirror-gutters {
            display: none;
        }

        .sb-header {
            z-index: 100;
        }

        .sb-content.e-view.hide-header {
            top: 0 !important;
        }

        .sb-header.e-view.hide-header {
            display: none;
        }

        .e-richtexteditor .e-rte-content .e-content pre {
            padding: 10px;
            background: #F4F5F7;
        }

        .highcontrast .e-richtexteditor .e-rte-content .e-content pre {
            padding: 10px;
            background: #303030;
        }
    </style>*@

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
<style>
    .e-code-mirror::before {
        content: '\e345';
    }

    .e-html-preview::before {
        content: '\e350';
    }

    .CodeMirror-linenumber,
    .CodeMirror-gutters {
        display: none;
    }

    .sb-header {
        z-index: 100;
    }

    .sb-content.e-view.hide-header {
        top: 0 !important;
    }

    .sb-header.e-view.hide-header {
        display: none;
    }

    .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #F4F5F7;
    }

    .highcontrast .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #303030;
    }
</style>
<script type="text/javascript">
    @Html.Raw(ViewBag.ErrorHandlingScript)
</script>
<script type="text/javascript">
    var rteObj, myCodeMirror, textArea;
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();
    }
    function mirrorConversion(e) {
        var id = rteObj.getID() + 'mirror-view';
        var mirrorView = rteObj.element.querySelector('#' + id);
        var charCount = rteObj.element.querySelector('.e-rte-character-count');
        if (e.targetItem === 'Preview') {
            textArea.style.display = 'block';
            mirrorView.style.display = 'none';
            textArea.innerHTML = myCodeMirror.getValue();
            charCount.style.display = 'block';
        }
        else {
            if (!mirrorView) {
                mirrorView = ej.base.createElement('div', { className: 'e-content' });
                mirrorView.id = id;
                textArea.parentNode.appendChild(mirrorView);
            }
            else {
                mirrorView.innerHTML = '';
            }
            textArea.style.display = 'none';
            mirrorView.style.display = 'block';
            renderCodeMirror(mirrorView, defaultRTE.Value);
            charCount.style.display = 'none';
        }
    }
    function renderCodeMirror(mirrorView, content) {
        myCodeMirror = CodeMirror(mirrorView, {
            Value: content,
            lineNumbers: true,
            mode: 'text/html',
            lineWrapping: true,
        });
    }
    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
    function actionCompleteHandler(e) {
        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
            this.sourceCodeModule.getPanel().style.display = 'none';
            mirrorConversion(e);
        }
        else {
            setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);
        }
    }
</script>