@using Syncfusion.EJ2


    <div class="col-lg-8 control-section">
        <ejs-querybuilder id="querybuilder" width="100%" rule="ViewBag.rule" maxGroupCount=5 ruleChange="updateRule">
            <e-querybuilder-columns>
                <e-querybuilder-column field="Category" label="Category" type="string"></e-querybuilder-column>
                <e-querybuilder-column field="PaymentMode" label="Payment Mode" type="string" template="ViewBag.template[1]" operators="ViewBag.paymentOperator"></e-querybuilder-column>
                <e-querybuilder-column field="TransactionType" label="Transaction Type" type="boolean" template="ViewBag.template[2]" operators="ViewBag.transactionOperator"></e-querybuilder-column>
                <e-querybuilder-column field="Description" label="Description" type="string"></e-querybuilder-column>
                <e-querybuilder-column field="Date" label="Date" type="date"></e-querybuilder-column>
                <e-querybuilder-column field="Amount" label="Amount" type="number" template="ViewBag.template[3]" operators="ViewBag.amountOperator"></e-querybuilder-column>
            </e-querybuilder-columns>
        </ejs-querybuilder>
    </div>

    <div class="col-lg-4 property-section">
        <table id="property" title="Properties">
            <tr>
                <td>
                    <div class="row">
                        <ejs-radiobutton id="radio1" label="JSON Rule" name="rule" value="json" checked="true" change="changeValue"></ejs-radiobutton>
                    </div>
                </td>
                <td>
                    <div class="row">
                        <ejs-radiobutton id="radio2" label="SQL Rule" name="rule" value="sql" change="changeValue"></ejs-radiobutton>
                    </div>
                </td>
            </tr>
            <tr>
                <td colspan="2">
                    <textarea id='ruleContent' readonly=true> </textarea>
                </td>
            </tr>
        </table>
    </div>





@section Scripts {
    <script>
        var element = document.getElementById('ruleContent');
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        element.textContent = JSON.stringify(qryBldrObj.getValidRules(qryBldrObj.rule), null, 4);
    </script>
}
<script>
    function paymentCreate() {
        var elem = document.createElement('input');
        elem.setAttribute('type', 'text');
        return elem;
    }
    function paymentDestroy(args) {
        var dropdown = ej.base.getComponent(document.getElementById(args.elementId), 'dropdownlist');
        if (dropdown) {
            dropdown.destroy();
        }
    }
    function paymentWrite(args) {
        var ds = ['Cash', 'Debit Card', 'Credit Card', 'Net Banking', 'Wallet'];
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var dropDownObj = new ej.dropdowns.DropDownList({
            dataSource: ds,
            value: args.values ? args.values : ds[0],
            change: function (e) {
                qryBldrObj.notifyChange(e.itemData.value, e.element);
            }
        });
        dropDownObj.appendTo('#' + args.elements.id);

    }
    function transactionCreate() {
        var elem = document.createElement('input');
        elem.setAttribute('type', 'checkbox');
        return elem;

    }
    function transactionDestroy(args) {
        ej.base.getComponent(document.getElementById(args.elementId), 'checkbox').destroy();
    }
    function transactionWrite(args) {
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var checked = args.values === 'IsExpensive' ? true : false;
        var boxObj = new ej.buttons.CheckBox({
            label: 'Is Expensive',
            checked: checked,
            change: function (e) {
                qryBldrObj.notifyChange(e.checked ? 'expensive' : 'income', e.event.target);
            }
        });
        boxObj.appendTo('#' + args.elements.id);

    }
    function amountCreate() {
        var elem = document.createElement('div');
        elem.setAttribute('class', 'ticks_slider');
        return elem;

    }
    function amountDestroy(args) {
        ej.base.getComponent(document.getElementById(args.elementId), 'slider').destroy();
    }
    function amountWrite(args) {
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var slider = new ej.inputs.Slider({
            value: args.values,
            min: 0,
            max: 100,
            type: 'MinRange',
            tooltip: { isVisible: true, placement: 'Before', showOn: 'Hover' },
            created: function (e) {
                if (document.getElementById('right-pane')) {
                    document.getElementById('right-pane').addEventListener('scroll', onScroll);
                }
            },
            change: function (e) {
                qryBldrObj.notifyChange(e.value, args.elements);
            }
        });
        slider.appendTo('#' + args.elements.id);
    }

    function changeValue() {
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        var validRule = qryBldrObj.getValidRules(qryBldrObj.rule);
        var element = document.getElementById('ruleContent');
        if (ej.base.getComponent(document.getElementById("radio2"), 'radio').checked) {
            element.textContent = qryBldrObj.getSqlFromRules(validRule);
        } else {
            element.textContent = JSON.stringify(validRule, null, 4);
        }
    }

    function updateRule(args) {
        var element = document.getElementById('ruleContent');
        var qryBldrObj = ej.base.getComponent(document.getElementById("querybuilder"), 'query-builder');
        if (ej.base.getComponent(document.getElementById("radio2"), 'radio').checked) {
            element.textContent = qryBldrObj.getSqlFromRules(args.rule);
        } else {
            element.textContent = JSON.stringify(args.rule, null, 4);
        }
    }

    function onScroll() {
        var slider = document.getElementsByClassName('ticks_slider'), sliderObj;
        for (var i = 0, len = slider.length; i < len; i++) {
            sliderObj = slider[i].ej2_instances[0];
            sliderObj.refreshTooltip();
        }
    }
</script>