@using Syncfusion.EJ2
@using Newtonsoft.Json
@model PropertyUpdateGet
@{
    var AllStuff = (ViewBagModel)ViewBag.AllStuff;
    
    ViewData["Title"] = @AllStuff.UITerms.Find(x => x.InternalName.Equals("Property")).TermString;
    ViewData["Image"] = "Property.png";
    ViewData["FavoriteGroup"] = AllStuff.FavoriteGroupList;
    Layout = "_LayoutAdmin";
}
<div class="container">
    <form method="post">
        @if (ViewBag.Env == "Production")
        {
            <div hidden class="row">
                <div class="col-3">
                    @AllStuff.UITerms.Find(x => x.InternalName.Equals("Id")).TermString
                </div>
                <div class="col-9">
                    <ejs-numerictextbox id="PropertyId" ejs-for="@Model.PropertyId" cssClass="e-outline" placeholder="PropertyId" floatLabelType="Auto"></ejs-numerictextbox>
                </div>
            </div>
        }
        else
        {
            <div class="row">
                <div class="col-3">
                    @AllStuff.UITerms.Find(x => x.InternalName.Equals("Id")).TermString
                </div>
                <div class="col-9">
                    <ejs-numerictextbox id="PropertyId" ejs-for="@Model.PropertyId" cssClass="e-outline" placeholder="PropertyId" floatLabelType="Auto"></ejs-numerictextbox>
                </div>
            </div>
        }

        <div class="row">
            <div class="col-3">
                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Name")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="Name" ejs-for="Name" cssClass="e-outline" placeholder="Name" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">@AllStuff.UITerms.Find(x => x.InternalName.Equals("Description")).TermString</div>
            <div class="col-9">
                <div class="row  e-rte-custom-tbar-section">
                    <div class="control-wrapper" id="rteSection">
                        <div class="control-section">
                            <ejs-richtexteditor ejs-for="Description" id="customtool" created="onCreate">
                                <e-content-template>
                                </e-content-template>
                                <e-richtexteditor-toolbarsettings items="@ViewBag.items">
                                </e-richtexteditor-toolbarsettings>
                            </ejs-richtexteditor>
                        </div>
                        <div id="customTbarDialog" style="display: none">
                            <div id="file-uploader">
                                <ejs-uploader id="UploadFiles" success="onSuccess" allowedExtensions=".png, .jpeg, .jpg">
                                    <e-uploader-asyncsettings saveUrl="@Url.Content("~/Property/SaveFile")" removeUrl="https://aspnetmvc.syncfusion.com/services/api/uploadbox/Remove"></e-uploader-asyncsettings>
                                </ejs-uploader>
                            </div>
                        </div>
                    </div>
                </div>


            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Menu name")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="MenuName" ejs-for="MenuName" cssClass="e-outline" placeholder="Menu name" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Mouse over")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="MouseOver" ejs-for="MouseOver" cssClass="e-outline" placeholder="Mouse over" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Type")).TermString
            </div>
            <div class="col-9">
                <ejs-dropdownlist id="PropertyTypeId" dataSource="@Model.PropertyTypes" ejs-for="@Model.PropertyTypeId" value="@Model.PropertyTypeId" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="PropertyTypeId"></e-dropdownlist-fields>
                </ejs-dropdownlist>

            </div>
        </div>

        <div class="row">
            <div class="col-3 offset-3">
                <ejs-button id="primarybtn" content="@AllStuff.UITerms.Find(x => x.InternalName.Equals("Save")).TermString" action="Submit" isPrimary="true"></ejs-button>
                <a asp-action="Index">@AllStuff.UITerms.Find(x => x.InternalName.Equals("Cancel")).TermString</a>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Creator")).TermString
            </div>
            <div class="col-9">
                @Model.CreatorName
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Created date")).TermString
            </div>
            <div class="col-9">
                @Model.CreatedDate
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Modifier")).TermString
            </div>
            <div class="col-9">
                @Model.ModifierName
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @AllStuff.UITerms.Find(x => x.InternalName.Equals("Modified date")).TermString
            </div>
            <div class="col-9">
                <div>@Model.ModifiedDate</div>
            </div>
        </div>

    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
<style>
    .e-code-mirror::before {
        content: '\e345';
    }

    .e-html-preview::before {
        content: '\e350';
    }

    .CodeMirror-linenumber,
    .CodeMirror-gutters {
        display: none;
    }

    .sb-header {
        z-index: 100;
    }

    .sb-content.e-view.hide-header {
        top: 0 !important;
    }

    .sb-header.e-view.hide-header {
        display: none;
    }

    .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #F4F5F7;
    }

    .highcontrast .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #303030;
    }
</style>
<script type="text/javascript">
    var rteObj, myCodeMirror, textArea;
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();
    }
    function mirrorConversion(e) {
        var id = rteObj.getID() + 'mirror-view';
        var mirrorView = rteObj.element.querySelector('#' + id);
        var charCount = rteObj.element.querySelector('.e-rte-character-count');
        if (e.targetItem === 'Preview') {
            textArea.style.display = 'block';
            mirrorView.style.display = 'none';
            textArea.innerHTML = myCodeMirror.getValue();
            charCount.style.display = 'block';
        }
        else {
            if (!mirrorView) {
                mirrorView = ej.base.createElement('div', { className: 'e-content' });
                mirrorView.id = id;
                textArea.parentNode.appendChild(mirrorView);
            }
            else {
                mirrorView.innerHTML = '';
            }
            textArea.style.display = 'none';
            mirrorView.style.display = 'block';
            renderCodeMirror(mirrorView, defaultRTE.value);
            charCount.style.display = 'none';
        }
    }
    function renderCodeMirror(mirrorView, content) {
        myCodeMirror = CodeMirror(mirrorView, {
            value: content,
            lineNumbers: true,
            mode: 'text/html',
            lineWrapping: true,
        });
    }
    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
    function actionCompleteHandler(e) {
        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
            this.sourceCodeModule.getPanel().style.display = 'none';
            mirrorConversion(e);
        }
        else {
            setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);
        }
    }
</script>
<script>
    var defaultRTE, ranges, selection = new ej.richtexteditor.NodeSelection();
    var defaultDialog;

    function onCreate() {
        defaultRTE = this;
        var customBtn = defaultRTE.element.querySelector('#custom_tbar');

        // Initialization of Dialog
        var dialog = new ej.popups.Dialog({
            header: 'Select Multiple Image file to upload',
            target: document.getElementById('rteSection'),
            showCloseIcon: false,
            isModal: true,
            created: function () {
                defaultDialog = this;
            },
            visible: false,
            height: 'auto',
            showCloseIcon: true
        });
        // Render initialized Dialog
        dialog.appendTo('#customTbarDialog');

        customBtn.onclick = function (e) {
            dialog.element.style.display = '';
            ranges = selection.getRange(document);
            dialog.width = defaultRTE.element.offsetWidth * 0.5;
            dialog.dataBind();
            dialog.show();
            customBtn.onclick = function (e) {
                defaultRTE.focusIn();
                dialog.element.style.display = '';
                ranges = selection.getRange(document);
                dialog.width = defaultRTE.element.offsetWidth * 0.5;
                dialog.dataBind();
                dialog.show();
            };
        };
    }

    function onSuccess(args) {
        //Replace the image saved URL location here
        defaultRTE.executeCommand('insertImage', { url: '/images/' + args.file.name });
        defaultDialog.hide();
    }
</script>