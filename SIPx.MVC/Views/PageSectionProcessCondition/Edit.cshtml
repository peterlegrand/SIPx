@using Syncfusion.EJ2
@using Newtonsoft.Json
@model PageSectionProcessConditionUpdateGet
@{
    var Term = (List<UITermLanguageCustomizationList>)ViewBag.UITerms;
    //ViewData["Title"] = @Term.Find(x => x.InternalName.Equals("Page section condition")).TermString;

    Layout = "_LayoutAdmin";
}
@* PETER TODO uncomment *@
<h1>
    <img src="~/images/icons/Condition.png" width="50" height="50" />@Term.Find(x => x.InternalName.Equals("Page section process condition")).TermString
</h1>
<div class="container">


    <form method="post">
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Id")).TermString
            </div>
            <div class="col-9">
                <ejs-numerictextbox id="PageSectionProcessConditionTypeId" ejs-for="@Model.PageSectionProcessConditionTypeId" cssClass="e-outline" placeholder="PageSectionProcessConditionId" floatLabelType="Auto"></ejs-numerictextbox>
                <ejs-textbox id="PageSectionProcessConditionTypeIdExtended" ejs-for="@Model.PageSectionProcessConditionTypeIdExtended" cssClass="e-outline" placeholder="Name" floatLabelType="Auto"></ejs-textbox>
                <ejs-numerictextbox id="PageSectionProcessConditionId" ejs-for="@Model.PageSectionProcessConditionId" cssClass="e-outline" placeholder="PageSectionProcessConditionId" floatLabelType="Auto"></ejs-numerictextbox>
                <ejs-numerictextbox id="PageSectionId" ejs-for="@Model.PageSectionId" cssClass="e-outline" placeholder="PageSectionId" floatLabelType="Auto"></ejs-numerictextbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Name")).TermString
            </div>    <div class="col-9">
                <ejs-textbox id="Name" ejs-for="Name" cssClass="e-outline" placeholder="Name" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">@Term.Find(x => x.InternalName.Equals("Description")).TermString</div>
            <div class="col-9">
                <ejs-richtexteditor ejs-for="Description" id="defaultRTE" showCharCount="true" actionBegin="handleFullScreen" actionComplete="actionCompleteHandler" maxLength="2000" created="created">
                    <e-content-template>
                    </e-content-template>
                    <e-richtexteditor-toolbarsettings items="@ViewBag.tools">
                    </e-richtexteditor-toolbarsettings>
                </ejs-richtexteditor>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Menu name")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="MenuName" ejs-for="MenuName" cssClass="e-outline" placeholder="Menu name" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>

        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Mouse over")).TermString
            </div>
            <div class="col-9">
                <ejs-textbox id="MouseOver" ejs-for="MouseOver" cssClass="e-outline" placeholder="Mouse over" floatLabelType="Auto"></ejs-textbox>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Condition type")).TermString
            </div>
            <div class="col-9">
                @*<ejs-dropdownlist id="PageSectionProcessConditionTypeIdExtended" dataSource="@Model.PageSectionProcessConditionTypes" ejs-for="@Model.PageSectionProcessConditionTypeIdExtended" value="@Model.PageSectionProcessConditionTypeIdExtended" index="2" popupHeight="220px">
                    <e-dropdownlist-fields text="Name" value="ExtendedId"></e-dropdownlist-fields>
                </ejs-dropdownlist>*@
                @Model.PageSectionProcessConditionTypeName
            </div>
        </div>
        <div class="row">
            @if (Model.PageSectionProcessConditionTypeIdExtended.Substring(0, 1) == "V")
            {
                @for (int i = 0; i < Model.Classifications.Count; i++)
                {
                    if (Model.Classifications[i].ClassificationId == int.Parse(Model.PageSectionProcessConditionTypeIdExtended.Substring(1)))

                    {<div class="col-3">
                            @Model.Classifications[i].ClassificationName
                        </div>
                        <div class="col-9">
                            <ejs-dropdownlist id="@Model.Classifications[i].ControlA" dataSource="@Model.Classifications[i].ClassificationValues" ejs-for="@Model.Classifications[i].ClassificationValueId" value="@Model.Classifications[i].ClassificationValueId" index="2" popupHeight="220px">
                                <e-dropdownlist-fields text="Name" value="ClassificationValueId"></e-dropdownlist-fields>
                            </ejs-dropdownlist>
                        </div>
                    }
                }
            }
        </div>
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T34" || Model.PageSectionProcessConditionTypeIdExtended == "T35" || Model.PageSectionProcessConditionTypeIdExtended == "T36")
        {
            <div class="row" id="ContainsCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Contains")).TermString
                </div>
                <div class="col-9">
                    <ejs-textbox id="PageSectionProcessConditionString" ejs-for="@Model.PageSectionProcessConditionString" cssClass="e-outline" placeholder="Contains" floatLabelType="Auto"></ejs-textbox>
                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T1")
        {
            <div class="row" id="ProcessTemplateCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Process template")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="ProcessTemplateId" dataSource="@Model.ProcessTemplates" ejs-for="@Model.ProcessTemplateId" value="@Model.ProcessTemplateId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="ProcessTemplateId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T2")
        {
            <div class="row" id="ProcessTemplateGroupCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Process template group")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="ProcessTemplateGroupId" dataSource="@Model.ProcessTemplateGroups" ejs-for="@Model.ProcessTemplateGroupId" value="@Model.ProcessTemplateGroupId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="ProcessTemplateGroupId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>

        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T12")
        {
            <div class="row" id="OrganizationCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="OrganizationId" dataSource="@Model.Organizations" ejs-for="@Model.OrganizationId" value="@Model.OrganizationId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="OrganizationId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T13")
        {
            <div class="row" id="ProjectCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="ProjectId" dataSource="@Model.Projects" ejs-for="@Model.ProjectId" value="@Model.ProjectId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="ProjectId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T15")
        {
            <div class="row" id="RoleCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Role")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="RoleId" dataSource="@Model.Roles" ejs-for="@Model.RoleId" value="@Model.RoleId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="ProjectId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T16")
        {
            <div class="row" id="SecurityLevelCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Security level")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="SecurityLevelId" dataSource="@Model.SecurityLevels" ejs-for="@Model.SecurityLevelId" value="@Model.SecurityLevelId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="SecurityLevelId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T20")
        {
            <div class="row" id="OrganizationRoleCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Organization role")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="OrganizationRoleId" dataSource="@Model.Roles" ejs-for="@Model.SpecificOrganizationRoleOfUserId" value="@Model.SpecificOrganizationRoleOfUserId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="RoleId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T22")
        {
            <div class="row" id="ProjectRoleCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Project role")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="ProjectRoleId" dataSource="@Model.Roles" ejs-for="@Model.SpecificProjectRoleOfUserId" value="@Model.SpecificProjectRoleOfUserId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="RoleId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T25")
        {
            <div class="row" id="ContentCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Content")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="ContentId" dataSource="@Model.Contents" ejs-for="@Model.ContentId" value="@Model.ContentId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="ContentId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T26")
        {
            <div class="row" id="ContentTypeCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Content type")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="ContentTypeId" dataSource="@Model.ContentTypes" ejs-for="@Model.ContentTypeId" value="@Model.ContentTypeId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="ContentTypeId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T38")
        {
            <div class="row" id="ContentTypeGroupCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Content type group")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="ContentTypeGroupId" dataSource="@Model.ContentTypeGroups" ejs-for="@Model.ContentTypeGroupId" value="@Model.ContentTypeGroupId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="ContentTypeGroupId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T28")
        {
            <div class="row" id="UserCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("User")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="UserId" dataSource="@Model.Users" ejs-for="@Model.SelectedUserId" value="@Model.SelectedUserId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="UserId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T37")
        {
            <div class="row" id="PersonCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("Person")).TermString
                </div>
                <div class="col-9">
                    <ejs-dropdownlist id="PersonId" dataSource="@Model.Persons" ejs-for="@Model.PersonId" value="@Model.PersonId" index="2" popupHeight="220px">
                        <e-dropdownlist-fields text="Name" value="PersonId"></e-dropdownlist-fields>
                    </ejs-dropdownlist>

                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T32")
        {
            <div class="row" id="FromDateCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("From date")).TermString
                </div>
                <div class="col-9">
                    <ejs-datepicker id="CreatedDateFrom" ejs-for="@Model.FromDate" value="@Model.FromDate"></ejs-datepicker>
                </div>
            </div>
        }
        @if (Model.PageSectionProcessConditionTypeIdExtended == "T33")
        {
            <div class="row" id="ToDateCondition">
                <div class="col-3">
                    @Term.Find(x => x.InternalName.Equals("To date")).TermString
                </div>
                <div class="col-9">
                    <ejs-datepicker id="CreatedDateTo" ejs-for="@Model.ToDate" value="@Model.ToDate"></ejs-datepicker>
                </div>
            </div>
        }
        <div class="row">
            <div class="col-3 offset-3">
                <ejs-button id="primarybtn" content="@Term.Find(x => x.InternalName.Equals("Save")).TermString" isPrimary="true"></ejs-button>
                <a asp-action="Index" asp-route-id="@Model.PageSectionId">@Term.Find(x => x.InternalName.Equals("Cancel")).TermString</a>
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Creator")).TermString
            </div>
            <div class="col-9">
                @Model.CreatorName
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Created date")).TermString
            </div>
            <div class="col-9">
                @Model.CreatedDate
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Modifier")).TermString
            </div>
            <div class="col-9">
                @Model.ModifierName
            </div>
        </div>
        <div class="row">
            <div class="col-3">
                @Term.Find(x => x.InternalName.Equals("Modified date")).TermString
            </div>
            <div class="col-9">
                <div>@Model.ModifiedDate</div>
            </div>
        </div>

    </form>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/codemirror.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/css/css.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/xml/xml.js" type="text/javascript"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.3.0/mode/htmlmixed/htmlmixed.js" type="text/javascript"></script>
<style>
    .e-code-mirror::before {
        content: '\e345';
    }

    .e-html-preview::before {
        content: '\e350';
    }

    .CodeMirror-linenumber,
    .CodeMirror-gutters {
        display: none;
    }

    .sb-header {
        z-index: 100;
    }

    .sb-content.e-view.hide-header {
        top: 0 !important;
    }

    .sb-header.e-view.hide-header {
        display: none;
    }

    .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #F4F5F7;
    }

    .highcontrast .e-richtexteditor .e-rte-content .e-content pre {
        padding: 10px;
        background: #303030;
    }
</style>
<script type="text/javascript">
    var rteObj, myCodeMirror, textArea;
    function created() {
        rteObj = this;
        textArea = rteObj.contentModule.getEditPanel();
    }
    function mirrorConversion(e) {
        var id = rteObj.getID() + 'mirror-view';
        var mirrorView = rteObj.element.querySelector('#' + id);
        var charCount = rteObj.element.querySelector('.e-rte-character-count');
        if (e.targetItem === 'Preview') {
            textArea.style.display = 'block';
            mirrorView.style.display = 'none';
            textArea.innerHTML = myCodeMirror.getValue();
            charCount.style.display = 'block';
        }
        else {
            if (!mirrorView) {
                mirrorView = ej.base.createElement('div', { className: 'e-content' });
                mirrorView.id = id;
                textArea.parentNode.appendChild(mirrorView);
            }
            else {
                mirrorView.innerHTML = '';
            }
            textArea.style.display = 'none';
            mirrorView.style.display = 'block';
            renderCodeMirror(mirrorView, defaultRTE.value);
            charCount.style.display = 'none';
        }
    }
    function renderCodeMirror(mirrorView, content) {
        myCodeMirror = CodeMirror(mirrorView, {
            value: content,
            lineNumbers: true,
            mode: 'text/html',
            lineWrapping: true,
        });
    }
    function handleFullScreen(e) {
        var sbCntEle = document.querySelector('.sb-content.e-view');
        var sbHdrEle = document.querySelector('.sb-header.e-view');
        if (e.targetItem === 'Maximize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.addClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
        else if (e.targetItem === 'Minimize') {
            if (ej.base.Browser.isDevice && ej.base.Browser.isIos) {
                ej.base.removeClass([sbCntEle, sbHdrEle], ['hide-header']);
            }
        }
    }
    function actionCompleteHandler(e) {
        if (e.targetItem && (e.targetItem === 'SourceCode' || e.targetItem === 'Preview')) {
            this.sourceCodeModule.getPanel().style.display = 'none';
            mirrorConversion(e);
        }
        else {
            setTimeout(function () { rteObj.toolbarModule.refreshToolbarOverflow(); }, 400);
        }
    }
</script>

<script type="text/javascript">
    function PageSectionProcessConditionTypeId(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.PageSectionProcessConditionTypes)), query);
                }
</script>
<script type="text/javascript">
    function UserId(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.Users)), query);
                }
</script>
<script type="text/javascript">
    function ModifierId(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.Users)), query);
                }
</script>
<script type="text/javascript">
    function Creator(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.Users)), query);
                }
</script>
<script type="text/javascript">
    function OrganizationId(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.Organizations)), query);
                }
</script>
<script type="text/javascript">
    function ProjectId(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.Projects)), query);
                }
</script>
<script type="text/javascript">
    function SecurityLevelId(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.SecurityLevels)), query);
                }
</script>
<script type="text/javascript">
    function LanguageId(e) {
                    var query = new ej.data.Query();
                    query = (e.text !== '') ? query.where('Name', 'startswith', e.text, true) : query;
                    e.updateData(@Html.Raw(JsonConvert.SerializeObject(Model.Languages)), query);
                }
</script>
